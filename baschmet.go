package main

import (
	"fmt"
	"io/ioutil"
	"os"
	"path"
	"strings"
)

const (
	generatedSignature = "Generated by Baschmet, Lev Aminov <l.aminov@tinkoff.ru>"
)

type Baschmet struct {
	DryRun  bool
	Charts  []string
	Options *Options
}

func (b *Baschmet) Start() error {
	for _, chartDir := range b.Charts {
		if _, err := os.Stat(chartDir); os.IsNotExist(err) {
			continue
		}
		vars, err := b.GetChartVariables(chartDir)
		if err != nil {
			return err
		}
		fmt.Println(vars.Chart.String())
		rootDir := path.Join(chartDir, "../..")
		err = b.ProcessFiles(rootDir, "templates/", vars)
		if err != nil {
			return err
		}
	}
	return nil
}

func (b *Baschmet) GetChartVariables(chartDir string) (*Variables, error) {
	chartFile := path.Join(chartDir, "Chart.yaml")
	chart, err := ChartFromFile(chartFile)
	if err != nil {
		return nil, err
	}
	metaFile := path.Join(chartDir, "..", "meta.yaml")
	meta, err := MetaFromFile(metaFile)
	if err != nil {
		return nil, err
	}
	return &Variables{
		Options:     b.Options,
		Chart:       chart,
		Meta:        meta,
		GeneratedBy: generatedSignature,
	}, nil
}

func (b *Baschmet) ProcessFiles(rootDir, templatesDir string, vars *Variables) error {
	templFiles, err := FilePathWalkDir(templatesDir)
	if err != nil {
		return err
	}
	for _, templFile := range templFiles {
		relPath := strings.TrimPrefix(templFile, templatesDir)
		resultPath := path.Join(rootDir, relPath)
		fmt.Println(resultPath)
		templ, err := GetTemplateText(templFile)
		if err != nil {
			return err
		}
		text, err := GenerateTemplate(templ, "gitlab", vars)
		if err != nil {
			return err
		}
		if b.DryRun {
			fmt.Println(text)
			continue
		}
		err = ioutil.WriteFile(resultPath, []byte(text), 0644)
		if err != nil {
			return err
		}
	}
	return nil
}
